#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <iostream>

#include"Renderer/Shaderprogram.hpp"
#include"Resources/ResourceManager.hpp"
#include"Renderer/Texture2D.hpp"

int g_windowSizeX = 640;
int g_windowSizeY = 480;

// Функция обратного вызова для обработки изменения размеров окна
// Каждый раз, когда окно изменяет размер, обновляем глобальные переменные и область просмотра
void glfwWindowSizeCallback(GLFWwindow* window, int width, int height) {
    g_windowSizeX = width; 
    g_windowSizeY = height;
    // Устанавливаем область вывода по всему окну
    glViewport(0, 0, g_windowSizeX, g_windowSizeY); // координаты (0,0) - нижний левый угол, далее ширина и высота
}

// Функция обратного вызова для обработки нажатия клавиш
// Если нажата клавиша Escape, устанавливаем флаг закрытия окна
void glfwKeyCallback(GLFWwindow* pwindow, int key, int scancode, int action, int mode) {
    // Если нажата клавиша ESC и действие - нажатие (PRESS)
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
        // Устанавливаем флаг, чтобы основной цикл знал, что пора закрывать окно
        glfwSetWindowShouldClose(pwindow, GL_TRUE);
    }
}

GLfloat point[] = {
     0.0f,  0.5f, 0.0f,  
     0.5f, -0.5f, 0.0f,  
    -0.5f, -0.5f, 0.0f   
};

GLfloat colors[] = {
    1.0f, 0.0f, 0.0f,   
    0.0f, 1.0f, 0.0f,   
    0.0f, 0.0f, 1.0f    
};

GLfloat texCoords[] = {
    0.5f, 1.0f,
    1.0f, 0.0f,
    0.0f, 0.0f
};


int main(int argc, char** argv) {

    if (!glfwInit()) {
        std::cout << "GLFW не инициализирован!" << std::endl;
        return -1;
    }

    // Устанавливаем параметры для создаваемого окна:
    // Указываем требуемую версию OpenGL (4.6) и профиль (core)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow* pwindow = glfwCreateWindow(g_windowSizeX, g_windowSizeY, "GameEngine", nullptr, NULL);
    if (!pwindow)
    {
        std::cout << "Ошибка при создании окна!" << std::endl;
        glfwTerminate();
        return -1;
    }

    glfwSetWindowSizeCallback(pwindow, glfwWindowSizeCallback);
    glfwSetKeyCallback(pwindow, glfwKeyCallback);

    glfwMakeContextCurrent(pwindow);

    if (!gladLoadGL()) {
        std::cout << "Не удалось загрузить GLAD" << std::endl;
        return -1;
    }

    // Вывод информации о рендерере и версии OpenGL в консоль
    std::cout << "Renderer: " << glGetString(GL_RENDERER) << std::endl;
    std::cout << "OpenGL version: " << glGetString(GL_VERSION) << std::endl;

    // Устанавливаем цвет очистки экрана (зеленый фон)
    glClearColor(0, 1, 0, 1);

    {   // изменение области видимости для того что бы обьект ResourceManager успел уничтожиться до выхода из контекста openGL 
        ResourceManager resourceManager(argv[0]);
        auto pDefaultShaderProgram = resourceManager.loadShaders("DefaultShader", "res/shaders/vertex.txt", "res/shaders/fragment.txt");
        if (!pDefaultShaderProgram) {
            std::cerr << "Can't create shader program: " << "DefaultShader" << std::endl;
            return 1;
        }

        auto tex = resourceManager.loadTexture("DefaultTexture", "res/textures/triangle_texture.jpg");

        // Создаем буфер для хранения вершинных координат (VBO для точек)
        GLuint points_vbo = 0;
        glGenBuffers(1, &points_vbo); // Генерируем идентификатор буфера
        glBindBuffer(GL_ARRAY_BUFFER, points_vbo); // Привязываем буфер к типу GL_ARRAY_BUFFER
        glBufferData(GL_ARRAY_BUFFER, sizeof(point), point, GL_STATIC_DRAW); // Загружаем данные вершин

        glGenBuffers(1, &points_vbo);
        glBindBuffer(GL_ARRAY_BUFFER, points_vbo);
        glBufferData(GL_ARRAY_BUFFER, sizeof(point), point, GL_STATIC_DRAW);

        // Создаем буфер для хранения цветов вершин (VBO для цветов)
        GLuint texCoord_vbo = 0;
        glGenBuffers(1, &texCoord_vbo);
        glBindBuffer(GL_ARRAY_BUFFER, texCoord_vbo);
        glBufferData(GL_ARRAY_BUFFER, sizeof(texCoords), texCoords, GL_STATIC_DRAW); // Загружаем данные цветов

        // Создаем объект вершинного массива (VAO)
        // VAO хранит информацию о том, как привязаны VBO и их атрибуты
        GLuint vao = 0;
        glGenVertexArrays(1, &vao);
        glBindVertexArray(vao);

        // Настраиваем атрибут для вершин (позиция):
        glEnableVertexAttribArray(0); // Включаем атрибут с location = 0 (позиция)
        glBindBuffer(GL_ARRAY_BUFFER, points_vbo); // Привязываем соответствующий VBO
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, nullptr); // Определяем формат данных:
        // 3 компоненты на вершину, тип данных GL_FLOAT, без нормализации, без промежутка между элементами

        // Настраиваем атрибут для цветов:
        GLuint colors_vbo = 0;
        glEnableVertexAttribArray(1); // Включаем атрибут с location = 1 (цвет)
        glBindBuffer(GL_ARRAY_BUFFER, colors_vbo); // Привязываем VBO для цветов
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, nullptr); // Определяем формат данных для цветов

        glEnableVertexAttribArray(2);
        glBindBuffer(GL_ARRAY_BUFFER, texCoord_vbo);
        glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 0, nullptr);

        pDefaultShaderProgram->use();
        pDefaultShaderProgram->setInt("tex", 0);

        // Основной цикл рендеринга: выполняется, пока окно не будет закрыто
        while (!glfwWindowShouldClose(pwindow))
        {
            // Очистка экрана: очищаем буфер цвета, используя заданный ранее glClearColor
            glClear(GL_COLOR_BUFFER_BIT);

            pDefaultShaderProgram->use();
            // Привязываем VAO, содержащий настройки для вершин и цветов
            glBindVertexArray(vao);
            tex->bind(); // делаем текстуру активной
            // Рисуем треугольник: GL_TRIANGLES указывает, что каждые 3 вершины составляют один треугольник
            glDrawArrays(GL_TRIANGLES, 0, 3);

            // Обмен переднего и заднего буферов, чтобы отобразить нарисованное изображение
            glfwSwapBuffers(pwindow);

            // Обработка событий (например, ввод с клавиатуры, изменение размеров окна)
            glfwPollEvents();
        }
    }

    glfwTerminate();
    return 0;
}
